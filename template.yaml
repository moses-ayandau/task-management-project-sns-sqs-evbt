AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Task Management System - API and Functions

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment to deploy resources to

  CoreStackName:
    Type: String
    Default: task-management-core-dev
    Description: Name of the core infrastructure CloudFormation stack

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java21

Resources:
  # API Gateway
  TaskManagementApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: 
              Fn::ImportValue: !Sub '${CoreStackName}-UserPoolArn'
      DefinitionBody:
        swagger: '2.0'
        info:
          title: TaskManagementApi
        paths:
          /tasks:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TaskCreationFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: {}
          /tasks/{taskId}:
            put:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TaskStatusUpdateFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: {}
          /tasks/{taskId}/reassign:
            put:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TaskReassignmentFunction.Arn}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses: {}

  # Lambda Functions
  UserSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub User-signup-${Environment}
      CodeUri: HelloWorldFunction/
      Handler: helloworld.UserSignupHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolId'
          USER_POOL_CLIENT_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolClientId'
          TASK_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
          USER_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
          TASK_ASSIGNMENT_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
          TASK_DEADLINE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
          CLOSED_TASK_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
          TASK_COMPLETE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskCompleteTopicArn'
          TASK_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueUrl'
          DEAD_LETTER_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-DeadLetterQueueUrl'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
        - SNSPublishPolicy:
            TopicName: '*'
        - SQSSendMessagePolicy:
            QueueName: '*'

  UserSignupCognitoPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UserSignupFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: 
        Fn::ImportValue: !Sub '${CoreStackName}-UserPoolArn'

  TaskCreationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Task-creation-${Environment}
      CodeUri: HelloWorldFunction/
      Handler: helloworld.TaskCreationHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolId'
          USER_POOL_CLIENT_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolClientId'
          TASK_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
          USER_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
          TASK_ASSIGNMENT_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
          TASK_DEADLINE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
          CLOSED_TASK_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
          TASK_COMPLETE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskCompleteTopicArn'
          TASK_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueUrl'
          DEAD_LETTER_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-DeadLetterQueueUrl'
      Policies:
        - SQSSendMessagePolicy:
            QueueName: '*'
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'

  TaskCreationApiPermission:
    Type: AWS::Lambda::Permission
    DependsOn: TaskManagementApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TaskCreationFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaskManagementApi}/${Environment}/POST/tasks'

  TaskAssignmentProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Task-assignment-processor-${Environment}
      CodeUri: HelloWorldFunction/
      Handler: helloworld.TaskAssignmentProcessorHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolId'
          USER_POOL_CLIENT_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolClientId'
          TASK_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
          USER_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
          TASK_ASSIGNMENT_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
          TASK_DEADLINE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
          CLOSED_TASK_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
          TASK_COMPLETE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskCompleteTopicArn'
          TASK_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueUrl'
          DEAD_LETTER_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-DeadLetterQueueUrl'
      Policies:
        - SNSPublishPolicy:
            TopicName: '*'
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'

  TaskQueueProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TaskAssignmentProcessorFunction
      Principal: sqs.amazonaws.com
      SourceArn: 
        Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueArn'

  TaskQueueEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: 
        Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueArn'
      FunctionName: !GetAtt TaskAssignmentProcessorFunction.Arn

  DeadlineNotifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Deadline-notifier-${Environment}
      CodeUri: HelloWorldFunction/
      Handler: helloworld.DeadlineNotifierHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolId'
          USER_POOL_CLIENT_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolClientId'
          TASK_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
          USER_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
          TASK_ASSIGNMENT_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
          TASK_DEADLINE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
          CLOSED_TASK_TOPIC_ARN:
            Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
          TASK_COMPLETE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskCompleteTopicArn'
          TASK_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueUrl'
          DEAD_LETTER_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-DeadLetterQueueUrl'
      Policies:
        - SNSPublishPolicy:
            TopicName: '*'
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'

  TaskExpiredProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Task-expired-processor-${Environment}
      CodeUri: HelloWorldFunction/
      Handler: helloworld.TaskExpiredProcessorHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolId'
          USER_POOL_CLIENT_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolClientId'
          TASK_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
          USER_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
          TASK_ASSIGNMENT_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
          TASK_DEADLINE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
          CLOSED_TASK_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
          TASK_COMPLETE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskCompleteTopicArn'
          TASK_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueUrl'
          DEAD_LETTER_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-DeadLetterQueueUrl'
      Policies:
        - SNSPublishPolicy:
            TopicName: '*'
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'

  ExpiredTasksQueueProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TaskExpiredProcessorFunction
      Principal: sqs.amazonaws.com
      SourceArn: 
        Fn::ImportValue: !Sub '${CoreStackName}-ExpiredTasksQueueArn'

  ExpiredTasksQueueEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: 
        Fn::ImportValue: !Sub '${CoreStackName}-ExpiredTasksQueueArn'
      FunctionName: !GetAtt TaskExpiredProcessorFunction.Arn

  TaskStatusUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Task-status-update-${Environment}
      CodeUri: HelloWorldFunction/
      Handler: helloworld.TaskStatusUpdateHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolId'
          USER_POOL_CLIENT_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolClientId'
          TASK_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
          USER_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
          TASK_ASSIGNMENT_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
          TASK_DEADLINE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
          CLOSED_TASK_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
          TASK_COMPLETE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskCompleteTopicArn'
          TASK_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueUrl'
          DEAD_LETTER_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-DeadLetterQueueUrl'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
        - SNSPublishPolicy:
            TopicName: '*'

  TaskStatusUpdateApiPermission:
    Type: AWS::Lambda::Permission
    DependsOn: TaskManagementApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TaskStatusUpdateFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaskManagementApi}/${Environment}/PUT/tasks/{taskId}'

  TaskReassignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub Task-reassignment-${Environment}
      CodeUri: HelloWorldFunction/
      Handler: helloworld.TaskReassignmentHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolId'
          USER_POOL_CLIENT_ID: 
            Fn::ImportValue: !Sub '${CoreStackName}-UserPoolClientId'
          TASK_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
          USER_TABLE_NAME: 
            Fn::ImportValue: !Sub '${CoreStackName}-UsersTableName'
          TASK_ASSIGNMENT_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
          TASK_DEADLINE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
          CLOSED_TASK_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
          TASK_COMPLETE_TOPIC_ARN: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskCompleteTopicArn'
          TASK_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-TaskQueueUrl'
          DEAD_LETTER_QUEUE_URL: 
            Fn::ImportValue: !Sub '${CoreStackName}-DeadLetterQueueUrl'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
        - SNSPublishPolicy:
            TopicName: '*'

  TaskReassignmentApiPermission:
    Type: AWS::Lambda::Permission
    DependsOn: TaskManagementApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TaskReassignmentFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TaskManagementApi}/${Environment}/PUT/tasks/{taskId}/reassign'

  # EventBridge Rule for task deadline notifications
  DeadlineSchedulerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'TaskDeadlineChecker-${Environment}'
      ScheduleExpression: 'rate(5 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt DeadlineNotifierFunction.Arn
          Id: DeadlineNotifierTarget

  DeadlineSchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeadlineNotifierFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DeadlineSchedulerRule.Arn

  # Step Functions
  UserOnboardingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        TaskAssignmentTopicArn: 
          Fn::ImportValue: !Sub '${CoreStackName}-TaskAssignmentTopicArn'
        TaskDeadlineTopicArn: 
          Fn::ImportValue: !Sub '${CoreStackName}-TaskDeadlineTopicArn'
        ClosedTaskTopicArn: 
          Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
      DefinitionUri: statemachines/user-onboarding.asl.json
      Policies:
        - SNSPublishPolicy:
            TopicName: '*'

  TaskExpiredStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        TasksTableName: 
          Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
        ClosedTaskTopicArn: 
          Fn::ImportValue: !Sub '${CoreStackName}-ClosedTaskTopicArn'
      DefinitionUri: statemachines/task-expired.asl.json
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue: !Sub '${CoreStackName}-TasksTableName'
        - SNSPublishPolicy:
            TopicName: '*'
Outputs:
  ApiEndpoint:
    Description: API Gateway Endpoint URL
    Value: !Sub 'https://${TaskManagementApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  TasksTableName:
    Description: DynamoDB Tasks Table Name
    Value: !Ref TasksTable

  UsersTableName:
    Description: DynamoDB Users Table Name
    Value: !Ref UsersTable

  TaskAssignmentTopicArn:
    Description: SNS Topic ARN for Task Assignment Notifications
    Value: !Ref TaskAssignmentNotificationTopic

  TaskDeadlineTopicArn:
    Description: SNS Topic ARN for Task Deadline Notifications
    Value: !Ref TaskDeadlineNotificationTopic

  ClosedTaskTopicArn:
    Description: SNS Topic ARN for Closed Task Notifications
    Value: !Ref ClosedTaskNotificationTopic

  TaskCompleteTopicArn:
    Description: SNS Topic ARN for Task Complete Notifications
    Value: !Ref TaskCompleteNotificationTopic

  UserOnboardingStateMachineArn:
    Description: ARN of the User Onboarding State Machine
    Value: !Ref UserOnboardingStateMachine

  TaskExpiredStateMachineArn:
    Description: ARN of the Task Expired State Machine
    Value: !Ref TaskExpiredStateMachine

  TaskQueueUrl:
    Description: URL of the Task Queue
    Value: !Ref TaskQueue

  DeadLetterQueueUrl:
    Description: URL of the Dead Letter Queue
    Value: !Ref DeadLetterQueue

  ExpiredTasksQueueUrl:
    Description: URL of the Expired Tasks Queue
    Value: !Ref ExpiredTasksQueue